{"version":3,"sources":["../../src/graphqlData/resolvers.js"],"names":["uploadDir","mkdirp","sync","storeFS","stream","filename","id","shortid","generate","path","url","Promise","resolve","reject","on","error","truncated","fs","unlinkSync","pipe","createWriteStream","processUpload","upload","mimetype","encoding","resolvers","Query","class","_","db","models","findById","classes","args","findAll","deck","decks","cards","card","where","deck_id","order","pools","pool","games","result","game","Game","standOnCards","game_id","hasMany","game_cards_stand","foreignKey","belongsTo","include","model","Pool","pool_id","pool_cards","Mutation","upsertClass","upsert","upsertClasses","map","c","then","deleteClasses","destroy","upsertDeck","upsertDecks","deleteDecks","upsertPools","fields","Object","keys","findOne","card_id","length","bulkCreate","deletePools","upsertCards","obj","promisesAll","all","image","err","console","name","split","forEach","message","deleteCards","dbSuccess","fsSuccess","urlComponents","deleteFile","deleteGames","q1","q2","upsertGames","log","game_cards","Upload","GraphQLUpload","unlink"],"mappings":"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","file":"resolvers.js","sourcesContent":["import db from '../db';\nimport {GraphQLUpload} from 'apollo-upload-server'\nimport fs from 'fs'\nimport mkdirp from 'mkdirp'\nimport shortid from 'shortid'\nimport promisesAll from 'promises-all'\n\nconst uploadDir = './assets/images/cards';\n\n// Ensure upload directory exists\nmkdirp.sync(uploadDir)\n\nconst storeFS = ({stream, filename}) => {\n\tconst id = shortid.generate()\n\tconst path = `${uploadDir}/${id}-${filename}`\n\tconst url = `/assets/images/cards/${id}-${filename}`\n\treturn new Promise((resolve, reject) =>\n\t\tstream\n\t\t.on('error', error => {\n\t\t\tif (stream.truncated)\n\t\t\t// Delete the truncated file\n\t\t\t\tfs.unlinkSync(path)\n\t\t\treject(error)\n\t\t})\n\t\t.pipe(fs.createWriteStream(path))\n\t\t.on('error', error => reject(error))\n\t\t.on('finish', () => resolve({id, path, url}))\n\t)\n}\n\nconst processUpload = async upload => {\n\tconst {stream, filename, mimetype, encoding} = await upload\n\tconst {id, path, url} = await storeFS({stream, filename})\n\treturn {url, path, filename};\n}\n\n\nconst resolvers = {\n\tQuery: {\n\t\tclass: (_, {id}) => db.models.class.findById(id),\n\t\tclasses: (_, args) => db.models.class.findAll(),\n\t\tdeck: (_, {id}) => db.models.deck.findById(id),\n\t\tdecks: (_, args) => db.models.deck.findAll(),\n\t\tcards: (_, args) => db.models.card.findAll({\n\t\t\twhere: {deck_id: args.deck_id},\n\t\t\torder: [['order']]\n\t\t}),\n\t\tpools: (_, args) => db.models.pool.findAll({\n\t\t\twhere: {deck_id: args.deck_id}\n\t\t}),\n\t\tgames: async (_, args) => {\n\t\t\t//console.log(\"args\", args);\n\t\t\tlet result = await db.models.game.findAll({\n\t\t\t\twhere: {deck_id: args.deck_id}\n\t\t\t})\n\t\t\t\n\t\t\t//console.log(\"result\", result);\n\t\t\treturn result;\n\t\t},\n\t\t\n\t},\n\t\n\tGame: {\n\t\tstandOnCards: async ({id: game_id}) => {\n\t\t\t//console.log(\"game_id\", game_id);\n\t\t\tdb.models.card.hasMany(db.models.game_cards_stand, {foreignKey: 'card_id'});\n\t\t\tdb.models.game_cards_stand.belongsTo(db.models.card, {foreignKey: 'card_id'});\n\t\t\t\n\t\t\tlet cards = await db.models.card.findAll({\n\t\t\t\tinclude: [{\n\t\t\t\t\tmodel: db.models.game_cards_stand,\n\t\t\t\t\twhere: {game_id}\n\t\t\t\t}]\n\t\t\t});\n\t\t\t\n\t\t\t//console.log(\"cards\", cards);\n\t\t\treturn cards;\n\t\t}\n\t},\n\t\n\tPool: {\n\t\tcards: async ({id: pool_id}) => {\n\t\t\t//console.log(\"pool_id\", pool_id);\n\t\t\tdb.models.card.hasMany(db.models.pool_cards, {foreignKey: 'card_id'});\n\t\t\tdb.models.pool_cards.belongsTo(db.models.card, {foreignKey: 'card_id'});\n\t\t\t\n\t\t\tlet cards = await db.models.card.findAll({\n\t\t\t\tinclude: [{\n\t\t\t\t\tmodel: db.models.pool_cards,\n\t\t\t\t\twhere: {pool_id}\n\t\t\t\t}],\n\t\t\t\torder: [['order']]\n\t\t\t});\n\t\t\treturn cards;\n\t\t}\n\t},\n\t\n\tMutation: {\n\t\tupsertClass: (_, args) => db.models.class.upsert(args),\n\t\tupsertClasses: (_, {classes}) =>\n\t\t\tclasses.map(c => db.models.class.upsert(c).then((result) => {\n\t\t\t\t//console.log(\"result\", result);\n\t\t\t}))\n\t\t,\n\t\tdeleteClasses: (_, {classes}) => {\n\t\t\t//console.log(\"classes\", classes);\n\t\t\treturn classes.map(c => db.models.class.destroy({\n\t\t\t\twhere: {id: c.id}\n\t\t\t}))\n\t\t},\n\t\tupsertDeck: (_, args) => db.models.deck.upsert(args),\n\t\tupsertDecks: (_, {decks}) =>\n\t\t\tdecks.map(c => db.models.deck.upsert(c).then((result) => {\n\t\t\t\t//console.log(\"result\", result);\n\t\t\t}))\n\t\t,\n\t\tdeleteDecks: (_, {decks}) => {\n\t\t\t//console.log(\"decks\", decks);\n\t\t\treturn decks.map(c => db.models.deck.destroy({\n\t\t\t\twhere: {id: c.id}\n\t\t\t}))\n\t\t},\n\t\tupsertPools: (_, {pools}) => {\n\t\t\t//console.log(\"pools\", pools);\n\t\t\treturn pools.map((pool) => {\n\t\t\t\tlet fields = Object.keys(pool);\n\t\t\t\t\n\t\t\t\t//console.log(\"fields\", fields);\n\t\t\t\treturn db.models.pool.upsert(pool, {fields}).then(async (result) => {\n\t\t\t\t\tlet cards = pool.cards;\n\t\t\t\t\t\n\t\t\t\t\tif (!pool.id) {\n\t\t\t\t\t\tpool = await db.models.pool.findOne({\n\t\t\t\t\t\t\t'order': [['id', 'DESC']]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//console.log(\"pool\", pool);\n\t\t\t\t\t//console.log(\"pool.id\", pool.id);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (cards) {\n\t\t\t\t\t\t// delete existing pool_cards\n\t\t\t\t\t\tawait db.models.pool_cards.destroy({\n\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\tpool_id: pool.id,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet pool_cards = cards.map((card) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tpool_id: pool.id,\n\t\t\t\t\t\t\t\tcard_id: card.id,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(pool_cards.length) {\n\t\t\t\t\t\t\tawait db.models.pool_cards.bulkCreate(pool_cards,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfields: Object.keys(pool_cards[0]),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tpool = await db.models.pool.findById(pool.id);\n\t\t\t\t\t\n\t\t\t\t\treturn pool;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\t\t,\n\t\tdeletePools: (_, {pools}) => {\n\t\t\t//console.log(\"pools\", pools);\n\t\t\treturn pools.map(c => db.models.pool.destroy({\n\t\t\t\twhere: {id: c.id}\n\t\t\t}))\n\t\t},\n\t\tupsertCards: async (obj, {cards}) => {\n\t\t\tconst {resolve, reject} = await promisesAll.all(\n\t\t\t\tcards.map(async (card) => {\n\t\t\t\t\tlet image = await card.image;\n\t\t\t\t\t\n\t\t\t\t\tif (image && typeof image !== 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar {url, filename} = await processUpload(image);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcard = {...card, image: url};\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tif (err) console.error(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!card.id && !card.name && filename) {\n\t\t\t\t\t\tcard.name = filename.split('.')[0];\n\t\t\t\t\t}\n\t\t\t\t\tawait db.models.card.upsert(card);\n\t\t\t\t\t\n\t\t\t\t\tlet result;\n\t\t\t\t\t\n\t\t\t\t\tif (card.id) {\n\t\t\t\t\t\tresult = await db.models.card.findById(card.id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = await db.models.card.findOne({\n\t\t\t\t\t\t\t'order': [['id', 'DESC']]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn result;\n\t\t\t\t})\n\t\t\t)\n\t\t\t\n\t\t\tif (reject.length)\n\t\t\t\treject.forEach(({name, message}) =>\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(`${name}: ${message}`)\n\t\t\t\t)\n\t\t\t\n\t\t\treturn resolve\n\t\t},\n\t\tdeleteCards: async (_, {cards}) => {\n\t\t\t//console.log(\"cards\", cards);\n\t\t\treturn cards.map(async (c) => {\n\t\t\t\tlet card = await db.models.card.findById(c.id);\n\t\t\t\t\n\t\t\t\tlet dbSuccess, fsSuccess;\n\t\t\t\t\n\t\t\t\tdbSuccess = await db.models.card.destroy({\n\t\t\t\t\twhere: {id: c.id}\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\tif (dbSuccess && card.image) {\n\t\t\t\t\tlet urlComponents = card.image.split('/');\n\t\t\t\t\tlet filename = urlComponents[urlComponents.length - 1];\n\t\t\t\t\tlet path = `./assets/images/cards/${filename}`;\n\t\t\t\t\tfsSuccess = await deleteFile(path);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn dbSuccess && fsSuccess;\n\t\t\t})\n\t\t},\n\t\t\n\t\tdeleteGames: async (_, {games}) => {\n\t\t\t//console.log(\"games\", games);\n\t\t\treturn Promise.all(games.map(async (game) => {\n\t\t\t\tlet q1 = db.models.game_cards_stand.destroy({\n\t\t\t\t\twhere: {game_id: game.id}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlet q2 = db.models.game.destroy({\n\t\t\t\t\twhere: {id: game.id}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn (Promise.all([q1, q2]));\n\t\t\t}));\n\t\t},\n\t\t\n\t\tupsertGames: (_, {games}) => {\n\t\t\tconsole.log(\"games\", games);\n\t\t\treturn games.map((game) => {\n\t\t\t\tlet fields = Object.keys(game);\n\t\t\t\t\n\t\t\t\t//console.log(\"fields\", fields);\n\t\t\t\treturn db.models.game.upsert(game, {fields}).then(async (result) => {\n\t\t\t\t\tlet standOnCards = game.standOnCards;\n\t\t\t\t\t\n\t\t\t\t\tif (!game.id) {\n\t\t\t\t\t\tgame = await db.models.game.findOne({\n\t\t\t\t\t\t\t'order': [['id', 'DESC']]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//console.log(\"game\", game);\n\t\t\t\t\t//console.log(\"game.id\", game.id);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (standOnCards) {\n\t\t\t\t\t\t// delete existing game_cards\n\t\t\t\t\t\tawait db.models.game_cards_stand.destroy({\n\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\tgame_id: game.id,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet game_cards = standOnCards.map((card) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tgame_id: game.id,\n\t\t\t\t\t\t\t\tcard_id: card.id,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(game_cards.length) {\n\t\t\t\t\t\t\tawait db.models.game_cards_stand.bulkCreate(game_cards,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfields: Object.keys(game_cards[0]),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tgame = await db.models.game.findById(game.id);\n\t\t\t\t\t\n\t\t\t\t\treturn game;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t},\n\t\n\tUpload: GraphQLUpload,\n};\n\nasync function deleteFile(path) {\n\treturn new Promise((resolve, reject) => {\n\t\tfs.unlink(path, (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tthrow err;\n\t\t\t\treject(false);\n\t\t\t} else {\n\t\t\t\tresolve(true)\n\t\t\t}\n\t\t})\n\t})\n}\n\nexport default resolvers;"]}